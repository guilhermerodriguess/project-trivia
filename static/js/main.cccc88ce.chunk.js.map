{"version":3,"sources":["trivia.png","redux/actions/index.js","redux/reducers/loginReducer.js","redux/reducers/triviaReducer.js","redux/reducers/timeReducer.js","redux/reducers/index.js","redux/store/index.js","component/Loading.jsx","component/LoginForm.jsx","pages/Login.jsx","component/Header.jsx","component/Timer.jsx","component/Questions.jsx","pages/Game.jsx","pages/Config.jsx","pages/Feedback.jsx","component/Score.jsx","pages/Ranking.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","updateToken","dispatch","a","fetch","response","json","data","type","token","INITIAL_STATE","name","assertions","score","gravatarEmail","player","state","action","login","nome","email","time","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Loading","React","Component","LoginForm","onInpChange","target","setState","id","value","checkEmail","includes","validateBtn","emailFormat","length","btnClick","event","preventDefault","props","handleInfo","getToken","loading","redirect","this","disabled","to","htmlFor","onChange","placeholder","data-testid","Button","onClick","connect","Login","clearScore","className","src","logo","alt","variant","Header","convertEmail","md5","toString","Timer","resetTime","prevProps","question","disableBtn","tempo","handleTime","respondido","prevState","atualizaTempo","setTimeout","Questions","validToken","requestAPI","endPoint","responseJSOn","respostaApi","fixQuestion","validateAPI","response_code","index","prepareQuestion","handleBtn","validateColor","checkScore","shufleArray","arr","sort","Math","random","results","dispatchUpdatedScore","updateAssertion","dificuldade","difficulty","undefined","addIndex","incorrect_answers","map","indexTwo","ind","arrButtons","correct_answer","shufleButtons","forEach","obj","replace","renderQuestions","validGreen","validRed","category","button","key","renderNextQuestion","nextQuestion","size","subscribe","updateScore","updateAssertions","Game","Config","Feedback","compare","b","handleRanking","urlFoto","ranking","JSON","parse","localStorage","getItem","validateJSON","scoreObj","picture","result","setItem","stringify","motivationMessage","playAgain","history","push","Score","Card","style","width","Img","class","Body","Title","Text","Ranking","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cccc88ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","export const UPDATE_LOGIN = 'UPDATE_LOGIN';\nexport const UPDATE_TOKEN = 'UPDATE_TOKEN';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const UPDATE_ASSERTIONS = 'UPDATE_ASSERTIONS';\nexport const RESET_SCORE = 'RESET_SCORE';\nexport const UPDATE_TIME = 'UPDATE_TIME';\n\nexport const updateLogin = (login) => ({\n  type: UPDATE_LOGIN,\n  login,\n});\n\nexport const updateToken = () => (\n  async (dispatch) => {\n    const url = 'https://opentdb.com/api_token.php?command=request';\n    const response = await fetch(url);\n    const data = await response.json();\n    dispatch({\n      type: UPDATE_TOKEN,\n      token: data.token,\n    });\n  }\n);\n\nexport const updateScore = (score) => ({\n  type: UPDATE_SCORE,\n  score,\n});\n\nexport const updateAssertions = (assertions) => ({\n  type: UPDATE_ASSERTIONS,\n  assertions,\n});\n\nexport const resetScore = () => ({\n  type: RESET_SCORE,\n});\n\nexport const updateTimer = (time) => ({\n  type: UPDATE_TIME,\n  time,\n});\n","import { UPDATE_ASSERTIONS,\n  UPDATE_LOGIN, UPDATE_SCORE, RESET_SCORE } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case UPDATE_LOGIN:\n    return {\n      ...state,\n      name: action.login.nome,\n      gravatarEmail: action.login.email,\n    };\n  case UPDATE_SCORE:\n    return {\n      ...state,\n      score: state.score + action.score,\n    };\n  case UPDATE_ASSERTIONS:\n    return {\n      ...state,\n      assertions: action.assertions + state.assertions,\n    };\n  case RESET_SCORE:\n    return {\n      ...state,\n      score: 0,\n      assertions: 0,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { UPDATE_TOKEN } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n};\n\nconst token = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case UPDATE_TOKEN:\n    return action.token;\n  default:\n    return state;\n  }\n};\n\nexport default token;\n","import { UPDATE_TIME } from '../actions';\n\nconst INITIAL_TIME = 30;\n\nconst time = (state = INITIAL_TIME, action) => {\n  switch (action.type) {\n  case UPDATE_TIME:\n    return action.time;\n  default:\n    return state;\n  }\n};\n\nexport default time;\n","import { combineReducers } from 'redux';\nimport player from './loginReducer';\nimport token from './triviaReducer';\nimport time from './timeReducer';\n\nconst rootReducer = combineReducers({ player, token, time });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\n\nclass Loading extends React.Component {\n  render() {\n    return (\n      <p>Carregando...</p>\n    );\n  }\n}\nexport default Loading;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { updateLogin, updateToken } from '../redux/actions';\nimport Loading from './Loading';\n\nclass LoginForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      nome: '',\n      email: '',\n      loading: false,\n      redirect: false,\n    };\n  }\n\n  onInpChange = ({ target }) => {\n    this.setState({\n      [target.id]: target.value,\n    });\n  }\n\n  checkEmail = () => {\n    const { email } = this.state;\n    if (email.includes('@') && email.includes('.com')) return true;\n    return false;\n  }\n\n  validateBtn = () => {\n    const { nome } = this.state;\n    const emailFormat = this.checkEmail();\n    if (nome.length > 0 && emailFormat) {\n      return false;\n    }\n    return true;\n  }\n\n  btnClick = async (event) => {\n    event.preventDefault();\n    const {\n      handleInfo, getToken,\n    } = this.props;\n    handleInfo(this.state);\n    this.setState({\n      loading: true,\n    });\n    await getToken();\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  render() {\n    const {\n      nome, email, loading, redirect,\n    } = this.state;\n    const disabled = this.validateBtn();\n    if (redirect) return <Redirect to=\"/project-trivia/game\" />;\n    if (loading) return <Loading />;\n    return (\n      <form id=\"email-password\">\n        <label htmlFor=\"nome\">\n          <input\n            type=\"text\"\n            id=\"nome\"\n            value={ nome }\n            onChange={ this.onInpChange }\n            placeholder=\"Nome\"\n            data-testid=\"input-player-name\"\n          />\n        </label>\n        <label htmlFor=\"email\">\n          <input\n            type=\"text\"\n            id=\"email\"\n            value={ email }\n            onChange={ this.onInpChange }\n            placeholder=\"Email\"\n            data-testid=\"input-gravatar-email\"\n          />\n        </label>\n        <Button\n          type=\"submit\"\n          disabled={ disabled }\n          onClick={ this.btnClick }\n          data-testid=\"btn-play\"\n        >\n          Play\n        </Button>\n      </form>\n    );\n  }\n}\n\nLoginForm.propTypes = {\n  handleInfo: propTypes.func.isRequired,\n  getToken: propTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleInfo: (state) => dispatch(updateLogin(state)),\n  getToken: () => dispatch(updateToken()),\n});\n\nexport default connect(null, mapDispatchToProps)(LoginForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-bootstrap';\nimport LoginForm from '../component/LoginForm';\nimport { resetScore } from '../redux/actions';\nimport logo from '../trivia.png';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      redirect: false,\n    };\n  }\n\n  componentDidMount() {\n    const { clearScore } = this.props;\n    clearScore();\n  }\n\n  btnClick = () => {\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  render() {\n    const { redirect } = this.state;\n    if (redirect) return <Redirect to=\"/project-trivia/config\" />;\n    return (\n      <div className=\"login-page\">\n        <header className=\"App-header\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          <div>\n            <LoginForm />\n            <Button\n              variant=\"light\"\n              type=\"button\"\n              data-testid=\"btn-settings\"\n              onClick={ this.btnClick }\n            >\n              Configuração\n            </Button>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  clearScore: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearScore: () => dispatch(resetScore()),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\n\nclass Header extends React.Component {\n  render() {\n    const { name, email, score } = this.props;\n    const convertEmail = md5(email).toString();\n    return (\n      <header id=\"header-game\">\n        <img className=\"foto-perfil\" alt=\"foto\" src={ `https://www.gravatar.com/avatar/${convertEmail}` } data-testid=\"header-profile-picture\" />\n        <div>\n          <h2 data-testid=\"header-player-name\">\n            { name }\n          </h2>\n        </div>\n        <div>\n          Pontuação Atual:\n          <h2 data-testid=\"header-score\">{ score }</h2>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  email: state.player.gravatarEmail,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateTimer } from '../redux/actions';\n\nclass Timer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      tempo: 30,\n    };\n  }\n\n  componentDidMount() {\n    this.handleTime();\n  }\n\n  componentDidUpdate(prevProps) {\n    this.resetTime(prevProps);\n  }\n\n  resetTime = (prevProps) => {\n    const { question, disableBtn } = this.props;\n    if (prevProps.question !== question) {\n      this.setState({\n        tempo: 30,\n      }, () => {\n        disableBtn(false);\n        this.handleTime();\n      });\n    }\n  }\n\n  handleTime = () => {\n    const { respondido } = this.props;\n    if (respondido) {\n      this.setState((prevState) => ({\n        tempo: prevState.tempo + 2,\n      }), () => {\n        const { disableBtn } = this.props;\n        disableBtn(true);\n      });\n      return null;\n    }\n    const { tempo } = this.state;\n    if (tempo === 0) {\n      const { disableBtn } = this.props;\n      disableBtn(true);\n      return null;\n    }\n    const onesec = 1000;\n    const { atualizaTempo } = this.props;\n    setTimeout(() => {\n      this.setState((prevState) => ({\n        tempo: prevState.tempo - 1,\n      }));\n      atualizaTempo(tempo);\n      this.handleTime();\n    }, onesec);\n  }\n\n  render() {\n    const { tempo } = this.state;\n    return (\n      <div className=\"timer\">\n        <h2>{ tempo }</h2>\n      </div>\n    );\n  }\n}\n\nTimer.propTypes = {\n  disableBtn: propTypes.func.isRequired,\n  question: propTypes.number.isRequired,\n  respondido: propTypes.bool.isRequired,\n  atualizaTempo: propTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  atualizaTempo: (tempo) => dispatch(updateTimer(tempo)),\n});\n\nexport default connect(null, mapDispatchToProps)(Timer);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport store from '../redux/store';\nimport { updateAssertions, updateScore, updateToken } from '../redux/actions';\nimport Timer from './Timer';\n\nclass Questions extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      validToken: false,\n      respostaApi: 'vazio',\n      index: 0,\n      disabled: false,\n      validateColor: false,\n      shufleButtons: [],\n      respondido: false,\n    };\n  }\n\n  componentDidMount() {\n    this.validateAPI();\n    store.subscribe(this.updateToken);\n  }\n\n  updateToken = () => {\n    this.setState((prevState) => ({\n      validToken: !prevState.validToken,\n    }));\n  }\n\n  requestAPI = async () => {\n    const { token } = this.props;\n    const endPoint = `https://opentdb.com/api.php?amount=5&token=${token}`;\n    const response = await fetch(endPoint);\n    const responseJSOn = await response.json();\n    this.setState({\n      respostaApi: this.fixQuestion(responseJSOn),\n    });\n    return responseJSOn;\n  }\n\n  validateAPI = async () => {\n    const response = await this.requestAPI();\n    const expirationCode = 3;\n    if (response.response_code === expirationCode) {\n      const { getToken } = this.props;\n      getToken();\n    }\n    const { index } = this.state;\n    const maxNumb = 4;\n    if (index <= maxNumb) this.prepareQuestion();\n  }\n\n  handleBtn = ({ target }) => {\n    this.setState({\n      validateColor: true,\n      respondido: true,\n    });\n    if (target.name === 'correct') {\n      this.checkScore();\n    }\n  };\n\n  shufleArray = (arr) => {\n    const param = 0.5;\n    const resultSort = arr.sort(() => Math.random() - param);\n    return resultSort;\n  }\n\n  checkScore = () => {\n    const {\n      respostaApi: { results },\n      index,\n    } = this.state;\n    const { dispatchUpdatedScore, updateAssertion } = this.props;\n    const hard = 3;\n    let dificuldade = hard;\n    switch (results[index].difficulty) {\n    case ('easy'):\n      dificuldade = 1;\n      break;\n    case ('medium'):\n      dificuldade = 2;\n      break;\n    default:\n      dificuldade = hard;\n    }\n    const { time } = this.props;\n    const base = 10;\n    const assertions = 1;\n    const score = base + (time * dificuldade);\n    dispatchUpdatedScore(score);\n    updateAssertion(assertions);\n  }\n\n  disableBtn = (response) => {\n    if (response) {\n      this.setState({\n        disabled: true,\n      });\n    } else {\n      this.setState({\n        disabled: false,\n      });\n    }\n  }\n\n  prepareQuestion = () => {\n    const { respostaApi: { results }, index } = this.state;\n    const maxNumb = 4;\n    if (results === undefined || index > maxNumb) return '';\n    const question = results[index];\n    const incorrectArr = [...question.incorrect_answers];\n    const addIndex = incorrectArr.map((response, indexTwo) => ({\n      response,\n      ind: indexTwo,\n    }));\n    const arrButtons = [question.correct_answer, ...addIndex];\n    const shufleButtons = this.shufleArray(arrButtons);\n    this.setState({\n      shufleButtons,\n    });\n  };\n\n  // arruma os &quot e &#039\n  fixQuestion = (respostaApi) => {\n    respostaApi.results.forEach((obj) => {\n      obj.question = obj.question.replace(/&amp;/g, '&')\n        .replace(/&quot;/g, '\"')\n        .replace(/&#039;/g, \"'\");\n      obj.correct_answer = obj.correct_answer.replace(/&amp;/g, '&')\n        .replace(/&quot;/g, '\"')\n        .replace(/&#039;/g, \"'\");\n      obj.incorrect_answers = obj.incorrect_answers\n        .map((value) => value.replace(/&amp;/g, '&')\n          .replace(/&quot;/g, '\"')\n          .replace(/&#039;/g, \"'\"));\n    });\n    return respostaApi;\n  }\n\n  renderQuestions = () => {\n    const { respostaApi: { results }, index,\n      shufleButtons, validateColor, disabled } = this.state;\n    if (results === undefined) return '';\n    const validGreen = validateColor === true ? 'success'\n      : null;\n    const validRed = validateColor === true ? 'danger'\n      : null;\n    const question = results[index];\n    return (\n      <div className=\"questionsMain\">\n        <div className=\"questions\">\n          <h2\n            data-testid=\"question-category\"\n            className=\"question-category\"\n          >\n            { question.category }\n\n          </h2>\n          <h2\n            data-testid=\"question-text\"\n            className=\"question-text\"\n          >\n            { question.question }\n\n          </h2>\n        </div>\n        <div data-testid=\"answer-options\" className=\"answer-container\">\n          <div className=\"answer-options\">\n            { shufleButtons.map((button, ind) => (\n              <Button\n                variant={ button === question.correct_answer ? (\n                  validGreen) : (validRed) }\n                onClick={ this.handleBtn }\n                name={ button === question.correct_answer\n                  ? ('correct') : ('incorrect') }\n                key={ ind }\n                type=\"button\"\n                disabled={ disabled }\n                className=\"options-button\"\n                data-testid={ button === question.correct_answer ? (\n                  'correct-answer') : (`wrong-answer-${button.ind}`) }\n              >\n                { button.response === undefined ? button : button.response }\n              </Button>\n            ))}\n          </div>\n          <div>\n            { this.renderNextQuestion() }\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  nextQuestion = () => {\n    const { index } = this.state;\n    const MAX = 4;\n    if (index > MAX) return null;\n    this.setState((prevState) => ({\n      index: prevState.index + 1,\n      validateColor: false,\n      respondido: false,\n    }), () => { this.prepareQuestion(); });\n  }\n\n  renderNextQuestion = () => {\n    const { disabled } = this.state;\n    if (disabled === true) {\n      return (\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          type=\"button\"\n          onClick={ this.nextQuestion }\n          className=\"btn-next\"\n          data-testid=\"btn-next\"\n        >\n          Next\n        </Button>\n      );\n    }\n  }\n\n  render() {\n    const { index, respondido } = this.state;\n    const MaxNumber = 4;\n    if (index <= MaxNumber) {\n      return (\n        <div>\n          <Timer\n            disableBtn={ this.disableBtn }\n            question={ index }\n            respondido={ respondido }\n          />\n          { this.renderQuestions() }\n        </div>\n      );\n    }\n    return (<Redirect to=\"/project-trivia/feedback\" />);\n  }\n}\n\nQuestions.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  dispatchUpdatedScore: PropTypes.func.isRequired,\n  updateAssertion: PropTypes.func.isRequired,\n  time: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  time: state.time,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(updateToken()),\n  dispatchUpdatedScore: (score) => dispatch(updateScore(score)),\n  updateAssertion: (assertions) => dispatch(updateAssertions(assertions)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","import React from 'react';\nimport Header from '../component/Header';\nimport Questions from '../component/Questions';\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <Questions />\n      </>\n    );\n  }\n}\n\nGame.propTypes = {\n\n};\n\nexport default Game;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Config extends React.Component {\n  render() {\n    return (\n      <>\n      <h2 data-testid=\"settings-title\">Configurações</h2>\n      <Link to=\"/project-trivia\">\n        <button>Voltar</button>\n      </Link>\n      </>\n    );\n  }\n}\n\nexport default Config;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-bootstrap';\nimport Header from '../component/Header';\n\nclass Feedback extends React.Component {\n  componentDidMount() {\n    this.handleRanking();\n  }\n\n  compare = (a, b) => {\n    const negativo = -1;\n    if (a.score > b.score) return negativo;\n    if (a.score < b.score) return 1;\n    return 0;\n  }\n\n  handleRanking = () => {\n    const { email, name, score } = this.props;\n    const convertEmail = md5(email).toString();\n    const urlFoto = `https://www.gravatar.com/avatar/${convertEmail}`;\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const validateJSON = ranking === null ? '' : ranking;\n    const scoreObj = { name, score, picture: urlFoto };\n    const result = [...validateJSON, scoreObj];\n    result.sort(this.compare);\n    localStorage.setItem('ranking', JSON.stringify(result));\n  }\n\n  motivationMessage = () => {\n    const { assertions, score } = this.props;\n    const beBetter = 'Could be better...';\n    const wellDone = 'Well Done!';\n    const threeAsnwers = 3;\n    localStorage.setItem('score', score);\n    localStorage.setItem('assertions', assertions);\n\n    if (assertions < threeAsnwers) return beBetter;\n    if (assertions >= threeAsnwers) return wellDone;\n  }\n\n  playAgain = () => {\n    const { history } = this.props;\n    history.push('/project-trivia');\n  };\n\n  render() {\n    const { assertions, score } = this.props;\n    return (\n      <>\n        <Header />\n        <main>\n          <div className=\"feedback\">\n            <h1 data-testid=\"feedback-text\">{ this.motivationMessage() }</h1>\n            <p>Placar total:</p>\n            <p data-testid=\"feedback-total-score\">{score}</p>\n            <p>Questões corretas:</p>\n            <p data-testid=\"feedback-total-question\">{assertions}</p>\n          </div>\n          <div className=\"feedback-buttons\">\n            <Link to=\"/project-trivia/ranking\">\n              <Button\n                variant=\"info\"\n                type=\"button\"\n                data-testid=\"btn-ranking\"\n              >\n                Ranking\n              </Button>\n            </Link>\n            <Button\n              variant=\"info\"\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              onClick={ this.playAgain }\n            >\n              Pagina inicial\n            </Button>\n          </div>\n        </main>\n      </>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n  email: state.player.gravatarEmail,\n  name: state.player.name,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from 'react-bootstrap';\n\nclass Score extends React.Component {\n  render() {\n    const {\n      name, score, picture, index,\n    } = this.props;\n    return (\n      // <div className=\"ranking-score-container\">\n      //   <img src={ picture } alt=\"foto de perfil\" />\n      //   <p data-testid={ `player-name-${index}` }>{ name }</p>\n      //   <p data-testid={ `player-score-${index}` }>{ score }</p>\n      // </div>\n      <Card style={ { width: '18rem' } } className=\"ranking-score-container\">\n        <Card.Img variant=\"top\" src={ picture } alt=\"foto de perfil\" class=\"picture\" />\n        <Card.Body>\n          <Card.Title data-testid={ `player-name-${index}` }>{ name }</Card.Title>\n          <Card.Text data-testid={ `player-score-${index}` }>\n            { score }\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nScore.propTypes = {\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default Score;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport Score from '../component/Score';\n\nclass Ranking extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      ranking: [],\n    };\n  }\n\n  componentDidMount() {\n    this.handleRanking();\n  }\n\n  handleRanking = () => {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    if (ranking) {\n      this.setState({\n        ranking,\n      });\n    }\n  }\n\n  render() {\n    const { ranking } = this.state;\n    return (\n      <div className=\"ranking-page\">\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        <div className=\"players-ranking\">\n          {\n            ranking !== undefined && ranking.length > 0\n              ? ranking.map(({ name, score, picture }, index) => (\n                <Score\n                  key={ index }\n                  name={ name }\n                  score={ score }\n                  picture={ picture }\n                  index={ index }\n                />\n              ))\n              : <p>Ainda não jogou</p>\n          }\n        </div>\n        <Link to=\"/project-trivia\">\n          <Button variant=\"primary\" type=\"button\" data-testid=\"btn-go-home\">\n            Voltar ao início\n          </Button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Config from './pages/Config';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/project-trivia\" component={ Login } />\n        <Route path=\"/project-trivia/game\" component={ Game } />\n        <Route path=\"/project-trivia/config\" component={ Config } />\n        <Route path=\"/project-trivia/feedback\" component={ Feedback } />\n        <Route path=\"/project-trivia/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}